openapi: 3.1.0

info:
  title: AI裁判官
  summary: AIが介入してゲームみたいに楽しく揉め事を解決するサービス
  version: 1.0.0

paths:
  /trial/create/:
    post:
      tags: [Trial]
      summary: 裁判を作成する
      description: 裁判を作成する.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrialCreate'
      responses:
        '201':
          description: 裁判作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialCreateResponse'
  /trial/player/create/:
    post:
      tags: [Trial]
      summary: 裁判に参加するプレイヤーの名前を登録する
      description: |
        QRコードを読み取り、名前を登録するエンドポイント
        ロールは、plaintiff (原告), defendant (被告), spectator (傍聴人) のいずれか
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreate'
      responses:
        '201':
          description: プレイヤー作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerCreateResponse'

  /trial/claim/:
    post:
      tags: [Trial]
      summary: 主張を作成する
      description: |
        原告、被告がQRコードを読み取り、名前を入力した後、最初の主張で入力した内容をPOSTするエンドポイント.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCreate'
      responses:
        '201':
          description: 主張作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimCreateResponse'
    patch:
      tags: [Trial]
      summary: 主張を更新する
      description: |
        裁判内容に対する主張を更新するエンドポイント。<br>
        ゲーム開始後は、原告、被告が主張を更新することができ、その時はこのPATCHを叩いて更新する.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimUpdate'
      responses:
        '200':
          description: 主張更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimUpdateResponse'
  
  /chat/:
    post:
      tags: [chat]
      summary: チャット内の新規メッセージを取得する
      description: クライアントは、定期的にこのエンドポイントを呼び出し、チャットのIDとリクエスト時の最新メッセージのcreated_atをリクエストし、新しいメッセージを取得する。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatGetRequest'
      responses:
        '200':
          description: メッセージ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatGetResponse'
  
  /chat/latest_message/:
    post:
      tags: [chat]
      summary: メインチャット内の最新メッセージを取得する
      description: | 
        議論フェーズでは、プロジェクターに（原告、被告、裁判官の3者が話しているメインの）チャットの最新メッセージを表示する。<br>
        その際に必要な最新メッセージを取得するためのエンドポイント。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LatestChatMessage'
      responses:
        '200':
          description: メッセージ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestChatMessageResponse'
  
  /message/create/:
    post:
      tags: [message]
      summary: チャットにメッセージを送信する
      description: |
        クライアントは、チャットIDと発信者IDと発言内容をリクエストする。<br>
        サーバーは、メッセージを保存し、AIを呼び出す。<br>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequset'
      responses:
        '201':
          description: メッセージ送信成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /message/good/:
    post:
      tags: [message]
      summary: メッセージにグッドをつける
      description: 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageReactionRequest'
      responses:
        '201':
          description: メッセージグッド成功

    delete:
      tags: [message]
      summary: メッセージのグッドを取り消す
      description:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMessageReaction'
      responses:
        '204':
          description: メッセージに対するリアクション(グッド)の取り消し成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMessageReactionResponse'

components:
  schemas:

    # 要素一つ一つの定義 ABC順
    claim:
      type: string
      example: "お腹が空いていたとしても人のプリンを食べるのは重罪"

    created_at:
      type: string
      example: "2024-09-16T10:35:49.716241+09:00"
    id:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    
    player_name:
      type: string
      example: "Player1"
    
    role:
      type: string
      enum: [plaintiff, defendant, spectator]
      example: plaintiff

    trial_subject:
      type: string
      example: "プリンを食べたことについて"
      
    
    message:
      type: string
      example: "Aさんの主張についてコメントします。プリンの容器の底の名前なんて見えません。"




    # リクエスト・レスポンスの定義 ABC順


    ClaimCreate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
      required:
        - trial_id
        - player_id
        - claim
  
    ClaimCreateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
        created_at:
          $ref: '#/components/schemas/created_at'  


    ClaimUpdate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
      required:
        - trial_id
        - player_id
        - claim
      
    ClaimUpdateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'

    DeleteMessageReaction:
      type: object
      properties:
        message_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'

    DeleteMessageReactionResponse:
      type: object


    LatestChatMessage:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
      required:
        - chat_id

    LatestChatMessageResponse:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        message_id:
          $ref: '#/components/schemas/id'
        message:
          $ref: '#/components/schemas/message'
        created_at:
          $ref: '#/components/schemas/created_at'

    PlayerCreate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        role:
          $ref: '#/components/schemas/role'
        player_name:
          $ref: '#/components/schemas/player_name'
      required:
        - trial_id
        - role
        - player_name

    PlayerCreateResponse:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        role:
          $ref: '#/components/schemas/role'
  



    TrialCreate:
      type: object
      properties:
        trial_subject:
          $ref: '#/components/schemas/trial_subject'
      required:
        - trial_subject

    TrialCreateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        trial_subject:
          $ref: '#/components/schemas/trial_subject'
        created_at:
          $ref: '#/components/schemas/created_at'

    ChatGetRequest:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
        latest_message_created_at:
          $ref: '#/components/schemas/created_at'
    
    MessageResponse:
      type: object
      properties:
        message_id:
          $ref: '#/components/schemas/id'
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        message:
          $ref: '#/components/schemas/message'
        created_at:
          $ref: '#/components/schemas/created_at'

    ChatGetResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageResponse'

    MessageCreateRequset:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        message:
          $ref: '#/components/schemas/message'
          

    MessageReactionRequest:
      type: object
      properties:
        message_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
