openapi: 3.1.0

info:
  title: AI裁判官
  summary: AIが補助してゲームみたいに楽しく揉め事を解決するWebアプリのAPI
  version: 1.0.0

paths:
  /trial/create/:
    post:
      tags: [Trial]
      summary: 裁判を作成する
      description: 裁判を作成する.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrialCreate'
      responses:
        '201':
          description: 裁判作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialCreateResponse'
  /trial/game_state/:
    post:
      tags: [Trial]
      summary: ゲームの初期進行状態を取得する
      description: |
        ゲームの初期進行状態を取得するエンドポイント。<br>
        - 2つのQRコードを表示するフェーズ (show_qr_2), 
        - 1つのQRコードを表示するフェーズ (show_qr_1), 
        - 裁判官の暫定的な判決を表示するフェーズ (show_judge)
        を指示する．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrialGameState'
      responses:
        '200':
          description: ゲームの初期進行状態取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialGameStateResponse'


  /trial/player/create/:
    post:
      tags: [Trial]
      summary: 裁判に参加するプレイヤーの名前を登録する
      description: |
        QRコードを読み取り、名前を登録するエンドポイント<br>
        ロールは、plaintiff (原告), defendant (被告), spectator (傍聴人)のいずれか<br>
        main_chat_id: 原告，被告，裁判官の3者が話すのチャットのID<br>
        sub_chat_id: 傍聴人が話すチャットのID (傍聴人のプレイヤーの名前登録時には値が存在) <br>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreate'
      responses:
        '201':
          description: プレイヤー作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerCreateResponse'
  /trial/claim/:
    post:
      tags: [Trial]
      summary: 主張を作成する
      description: |
        原告、被告がQRコードを読み取り、名前を入力した後、最初の主張で入力した内容をPOSTするエンドポイント.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCreate'
      responses:
        '201':
          description: 主張作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimCreateResponse'
    patch:
      tags: [Trial]
      summary: 主張を更新する
      description: |
        裁判内容に対する主張を更新するエンドポイント。<br>
        ゲーム開始後は、原告、被告が主張を更新することができ、その時はこのPATCHを叩いて更新する.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimUpdate'
      responses:
        '200':
          description: 主張更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimUpdateResponse'
  /chat/{chat_id}/message/polling/:
    get:
      tags: [Chat]
      summary: チャット内の新規メッセージを取得する
      description: クライアントは、チャットのIDとリクエスト時点で保持している最新メッセージのcreated_atを用いて、定期的にこのエンドポイントを呼び出し、新しいメッセージを取得する。
      parameters:
        - in: path
          name: chat_id
          required: true
          description: 
          schema:
            $ref: '#/components/schemas/id'
        - in: query
          name: latest_message_created_at
          required: true
          description: 
          schema:
            $ref: '#/components/schemas/created_at'
      responses:
        '200':
          description: メッセージ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatGetResponse'      
  /chat/latest_message/:
    post:
      tags: [Chat]
      summary: メインチャット内の最新メッセージを取得する
      description: | 
        議論フェーズでは、プロジェクターに（原告、被告、裁判官の3者が話しているメインの）チャットの最新メッセージを表示する。<br>
        その際に必要な最新メッセージを取得するためのエンドポイント。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LatestChatMessage'
      responses:
        '200':
          description: メッセージ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestChatMessageResponse'
  /message/create/:
    post:
      tags: [Message]
      summary: チャットにメッセージを送信する
      description: |
        クライアントは、チャットIDと発信者IDと発言内容をリクエストする。<br>
        サーバーは、メッセージを保存し、AIを呼び出す。<br>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequset'
      responses:
        '201':
          description: メッセージ送信成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /message/{message_id}/good/:
    post:
      tags: [Message]
      summary: メッセージにグッドをつける
      parameters:
        - in: path
          name: message_id
          required: true
          description: 対象のメッセージID
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageReactionRequest'
      responses:
        '200':
          description: メッセージグッド成功
          content:
            application/json:
              example:
                success: "グッドをつけました。"
  /message/{message_id}/ungood/:
    post:
      tags: [Message]
      summary: メッセージのグッドを取り消す
      parameters:
        - in: path
          name: message_id
          required: true
          description: 対象のメッセージID
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageReactionRequest'
      responses:
        '200':
          description: メッセージに対するリアクション(グッド)の取り消し成功
          content:
            application/json:
              example:
                success: "グッドを取り消しました。"


components:
  schemas:
    # 要素一つ一つの定義 ABC順
    claim:
      type: string
      maximum: 100
      examples:
        - "お腹が空いていたとしても人のプリンを食べるのは重罪"

    created_at:
      type: string
      examples:
        - "2024-09-16T10:35:49.716241+09:00"

    game_state:
      type: string
      enum: [show_qr_2, show_qr_1, show_judge]
      examples:
        - show_qr_2

    id:
      type: string
      format: uuid
      examples:
        - 123e4567-e89b-12d3-a456-426614174000

    message:
      type: string
      maximum: 100
      examples:
        - "Aさんの主張についてコメントします。プリンの容器の底の名前なんて見えません。"

    player_name:
      type: string
      examples:
        - "Player1"

    role:
      type: string
      enum: [plaintiff, defendant, spectator, judge]
      examples:
        - plaintiff

    trial_subject:
      type: string
      maximum: 50
      examples:
        - "プリンを食べたことについて"

    # リクエスト・レスポンスの定義 ABC順
    ChatGetResponse:
      type: array
      items:
        type: object
        properties:
          message_id:
            $ref: '#/components/schemas/id'
          chat_id:
            $ref: '#/components/schemas/id'
          player_id:
            $ref: '#/components/schemas/id'
          player_name:
            $ref: '#/components/schemas/player_name'
          player_role:
            $ref: '#/components/schemas/role'
          message:
            $ref: '#/components/schemas/message'
          created_at:
            $ref: '#/components/schemas/created_at'

    ClaimCreate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
      required:
        - trial_id
        - player_id
        - claim
  
    ClaimCreateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
        created_at:
          $ref: '#/components/schemas/created_at'  

    ClaimUpdate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'
      required:
        - trial_id
        - player_id
        - claim
      
    ClaimUpdateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        claim:
          $ref: '#/components/schemas/claim'

    LatestChatMessage:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
      required:
        - chat_id

    LatestChatMessageResponse:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        message_id:
          $ref: '#/components/schemas/id'
        message:
          $ref: '#/components/schemas/message'
        created_at:
          $ref: '#/components/schemas/created_at'

    MessageCreateRequset:
      type: object
      properties:
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        message:
          $ref: '#/components/schemas/message'

    MessageReactionRequest:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/id'

    MessageResponse:
      type: object
      properties:
        message_id:
          $ref: '#/components/schemas/id'
        chat_id:
          $ref: '#/components/schemas/id'
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        message:
          $ref: '#/components/schemas/message'
        created_at:
          $ref: '#/components/schemas/created_at'

    PlayerCreate:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        role:
          $ref: '#/components/schemas/role'
        player_name:
          $ref: '#/components/schemas/player_name'
      required:
        - trial_id
        - role
        - player_name

    PlayerCreateResponse:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/id'
        player_name:
          $ref: '#/components/schemas/player_name'
        role:
          $ref: '#/components/schemas/role'
        main_chat_id:
          $ref: '#/components/schemas/id'
        sub_chat_id:
          $ref: '#/components/schemas/id'

    TrialCreate:
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/trial_subject'
      required:
        - subject

    TrialCreateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        subject:
          $ref: '#/components/schemas/trial_subject'
        created_at:
          $ref: '#/components/schemas/created_at'

    TrialGameState:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
    
    TrialGameStateResponse:
      type: object
      properties:
        trial_id:
          $ref: '#/components/schemas/id'
        game_state:
          $ref: '#/components/schemas/game_state'
